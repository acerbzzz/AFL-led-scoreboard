import requests
from rgbmatrix import RGBMatrix, RGBMatrixOptions
import json
import threading
import time

# Define LED matrix configuration
options = RGBMatrixOptions()
options.cols = 64
options.rows = 32
options.chain_length = 1
options.parallel = 1
options.hardware_mapping = 'regular'  # Change to 'adafruit-hat' for the HAT version
matrix = RGBMatrix(options=options)

# Function to fetch AFL data from the API
def fetch_afl_data():
    url = "https://api.squiggle.com.au/sse/events"
    response = requests.get(url, stream=True)
    for line in response.iter_lines():
        if line:
            data = json.loads(line)
            process_data(data)

# Function to process AFL data and display on LED matrix
def process_data(data):
    event = data.get('event')
    if event == 'game':
        game_data = data.get('data')
        game_id = game_data.get('id')
        hscore = game_data.get('hscore')
        ascore = game_data.get('ascore')
        venue = game_data.get('venue')
        timestr = game_data.get('timestr')
        # Display game data on LED matrix
        message = f"AFL Game ID: {game_id}, Venue: {venue}, Time: {timestr}, Score - Home: {hscore}, Away: {ascore}"
        matrix.Clear()
        matrix.DrawText(0, 16, (255, 255, 255), message)
    elif event == 'complete':
        complete_data = data.get('data')
        game_id = complete_data.get('gameid')
        # Additional processing or display for completed games if needed
    elif event == 'winner':
        winner_data = data.get('data')
        game_id = winner_data.get('gameid')
        winner = winner_data.get('winner')
        # Additional processing or display for winner data if needed
    elif event == 'score':
        score_data = data.get('data')
        game_id = score_data.get('gameid')
        # Additional processing or display for score updates if needed
    # Add handling for other events if necessary

# Thread to continuously fetch AFL data
def run():
    while True:
        fetch_afl_data()
        time.sleep(1)  # Adjust interval as needed

# Start the thread to run AFL data fetching
thread = threading.Thread(target=run)
thread.start()
